---
author: Jack Davison
execute: 
  cache: false
---

# The [openairmaps]{.pkg} package {#sec-openairmaps}

## Installation

[openairmaps]{.pkg} is on CRAN, so can be simply downloaded using `install.packages`.

```{r}
#| label: install
#| eval: false
install.packages("openairmaps")
```

If you would like to access new features and bug fixes before they're pushed to CRAN, the development version of [openairmaps]{.pkg} can be downloaded directly from GitHub.

```{r}
#| label: remotes
#| eval: false
library(remotes)
install_github("davidcarslaw/openairmaps")
```

If you would like to use [openairmaps]{.pkg} in your analysis, don't forget to load it using the `library` function.

```{r}
#| label: library
#| cache: false
library(openairmaps)
library(tidyverse)
```

::: {.callout-note appearance="simple"}
This chapter was produced using R version `r getRversion()` and [openairmaps]{.pkg} version `r packageDescription("openairmaps", field = "Version")`.
:::

## Overview

### Background

As the R ecosystem developed, `{rmarkdown}` and, more recently, [Quarto](https://quarto.org/)) emerged as capable tools for combining data analysis with document preparation. While these approaches can render typical .docx and .pdf outputs, one of their most common output formats is the HTML document. This format has many strengths, but a key one is interactivity; HTML widgets allow documents to be more informative and engaging. Numerous packages have been developed to easily develop these interactive widgets, such as `{plotly}` for plots, `{DT}` for tables, and `{leaflet}` for maps. The [openairmaps]{.pkg} package concerns itself with making [leaflet]{.pkg} maps.

Air quality data analysis --- particularly as it pertains to long term monitoring data --- naturally lends itself to being visualised spatially on a map. Monitoring networks are geographically distributed, and ignoring their geographical context may lead to incomplete insights at best and incorrect conclusions at worst! Furthermore, many air quality analysis tools are *directional*, asking questions of the data along the lines of "do elevated concentrations come from the North, South, East or West?" The natural question that follows is "well, what actually is it to the North/South/East/West that could be causing elevated concentrations?" --- a map can help answer that question straightforwardly.

### Functions

[openairmaps]{.pkg} currently has three families of functions, those being network visualisation, directional analysis, and trajectory analysis. These are summarised in @tbl-openairmaps-overview. The functions are further divided into two categories:

-   **"All-in-one"** functions are most like [openair]{.pkg} functions in that they will construct a map from the ground-up. These functions provide the quickest route from data to a HTML map.

-   **"Marker"** functions are most like [leaflet]{.pkg} functions in that they add layers onto pre-existing `leaflet` maps. These are more complicated to use, but are more powerful if you are more familiar with how [leaflet]{.pkg} works.

```{r}
#| label: tbl-openairmaps-overview
#| tbl-cap: The [openairmaps]{.pkg} toolkit.
#| echo: false
#| cache: false
library(gt)
library(dplyr)

desc <-
  c(
    "Visualises any of the networks made available by `importMeta`.",
    "Uses any of the `openair` directional analysis plots (e.g., `polarPlot`) as markers, allowing them to be viewed in their geospatial context.",
    "Creates interactive visualisations of HYSPLIT trajectories, allowing for finer investigations when compared with their static `openair` counterparts."
  )

tribble(
  ~Family, ~`All-in-one`, ~Markers,
  "Network Visualisation", "`networkMap`", "",
  "Directional Analysis", paste(c("`annulusMap`", "`freqMap`", "`percentileMap`", "`polarMap`", "`pollroseMap`", "`windroseMap`"), collapse = "<br>"), "`addPolarMarkers`",
  "Trajectory Analysis", paste(c("`trajMap`", "`trajLevelMap`"), collapse = "<br>"), "`addTrajPaths`"
) %>%
  mutate(Description = desc) %>%
  gt() %>%
  fmt_markdown(columns = everything()) %>%
  cols_move_to_start(c(Family, Description))

```

### [leaflet]{.pkg} Primer

While [openairmaps]{.pkg} can be used without a thorough understanding of the [leaflet]{.pkg} package, some knowledge can definitely help! @fig-leafletdemo shows an example leaflet map. Try the following:

-   Click and drag to move the map around --- you can go anywhere in the world!

-   Use your scroll wheel or the +/- options (top left) to zoom in and out.

-   Hover over the marker to see its label.

-   Click on the marker to see a popup.

-   Use the "layer control" menu (top right) to show and hide the marker, and swap between base maps.

```{r}
#| label: fig-leafletdemo
#| fig-cap: "An example of a leaflet map."
library(leaflet)

leaflet() %>%
  addTiles(group = "OSM") %>%
  addProviderTiles("CartoDB.Positron", group = "CartoDB.Positron") %>%
  addMarkers(
    lat = 51.5034,
    lng = -0.1276,
    label = "10 Downing Street",
    popup = "This is where the UK Prime Minister lives!",
    group = "Marker"
  ) %>%
  addLayersControl(
    baseGroups = c("CartoDB.Positron", "OSM"), 
    overlayGroups = "Marker"
  )
```

The anatomy of a leaflet map may look a little unusual, so to unpack:

-   Every leaflet map starts with the `leaflet` function.

-   Different base maps can be added using `addTiles` and `addProviderTiles`. There are many of these base maps --- some are minimalist and some are busy, some are colourful and some are black-and-white, some are plain and some are highly stylised!

-   Markers can be added using `addMarkers` and other similar functions. These markers can have different features such as hover labels and popups.

-   The `addLayersControl` function creates a menu which allows users to show/hide or swap between certain features of the map.

Don't worry if you don't fully understand all of this --- the "all-in-one" functions in [openairmaps]{.pkg} deal with much of this for you! The only [leaflet]{.pkg} awareness you'll need to use these functions is knowledge of the available base map providers, which can be accessed using `leaflet::providers`. These are shown in the collapsible below (the list is very long!).

::: {.callout-note collapse="true"}
#### View Providers

```{r}
#| label: leafletproviders
leaflet::providers
```
:::

If you would like to use [openairmaps]{.pkg} in a more advanced way (for example, using the "marker" class of functions), you may find it useful to learn some [leaflet]{.pkg}. Its authors have written an excellent free [guide](https://rstudio.github.io/leaflet/) to help you get started.

## Network Visualisation

Network visualisation is the simplest family of functions in [openairmaps]{.pkg} --- in fact, it only has one member. `networkMap` is a function which you can consider as an analogue to `importMeta` from [openair]{.pkg}. To demonstrate, lets consider the metadata available for the AURN.

```{r}
#| label: importMeta
library(openair)
aurn_meta <- importMeta(source = "aurn", all = TRUE)
dplyr::glimpse(aurn_meta)
```

This dataset has `r nrow(aurn_meta)` rows and `r ncol(aurn_meta)` columns, which is a lot of information to explore in a tabular format. A more effective way to communicate this information could be a map, which can be created using the `networkMap` function. Consider this as an analogue to `importMeta` --- it can map any of the `source`s that `importMeta` can. @fig-networkMap visualises the active AURN sites as of `r Sys.Date()`.

```{r}
#| label: fig-networkMap
#| fig-cap: "An interactive map of the AURN monitoring network."
networkMap(source = "aurn")
```

`networkMap` is a quite simple function, with the following arguments for customisation:

-   `source`: Any of the `importMeta` sources --- can be "aurn", "saqn" (or "saqd"), "aqe", "waqn", "ni", "kcl" or "europe".

-   `control`: Any column of the equivalent `importMeta` dataset, which is used to create a "layer control" menu to allow readers to filter for certain sites. The `control` option is quite opinionated, and selects an appropriate style of layer control depending on the column selected (e.g., pollutants are switched between, whereas multiple site types can be selected at once)

-   `date`: By default, `networkMap` shows currently active monitoring sites. By specifying `date`, sites active *at that date* will be shown. This may be of interest if you want to explore the history of your chosen monitoring site.

-   `cluster`: By default, markers are clustered together until users zoom in close. This default behaviour improves the appearance and performance of the HTML map widget. The `cluster` argument allows you to turn this feature off.

-   `provider`: Any one of the [leaflet]{.pkg} providers (see `leaflet::providers`).

Some of these arguments are demonstrated in @fig-networkMap2 for the Northern Ireland AQ Network. Pay particular attention to the layer control menu, which allows you to toggle different site types on and off.

```{r}
#| label: fig-networkMap2
#| fig-cap: "Demonstrating more features of `networkMap`."
networkMap(
  source = "ni",
  control = "site_type",
  provider = "CartoDB.Positron", 
  cluster = FALSE
)
```

## Directional Analysis

### Example Data

[openairmaps]{.pkg} contains the `polar_data` dataset to allow users to test the directional analysis functions. The structure of this data set is provided below, and a summary is given in @tbl-polardata. The important feature of this data when compared to `openair::mydata` is latitude and longitude information, which [openairmaps]{.pkg} needs to place the directional analysis markers in the correct positions.

```{r}
#| label: glimpsePolar
dplyr::glimpse(polar_data)
```

```{r}
#| label: tbl-polardata
#| echo: false
#| tbl-cap: "A statistical summary of the `polar_data` dataset."
polar_data %>%
  select(-site_type) %>%
  gtsummary::tbl_summary(
    missing = "no", 
    by = "site",
    type = list(lat ~ "continuous", lon ~ "continuous"),
    statistic = list(lat ~ "{median}", lon ~ "{median}")
  )
```

By "directional analysis", we are referring to the outputs from [openair]{.pkg} functions like `polarPlot`. As a reminder as to what these figures look like, see @fig-openairplots.

```{r}
#| label: fig-openairplots
#| fig-cap: "All of the directional analysis figures which can be plotted on a map."
#| fig-subcap: 
#| - "Polar Annulus"
#| - "Polar Frequency"
#| - "Percentile Rose"
#| - "Polar Plot"
#| - "Pollution Rose"
#| - "Wind Rose"
#| layout-ncol: 3
polarAnnulus(polar_data)
polarFreq(polar_data)
percentileRose(polar_data)
polarPlot(polar_data)
pollutionRose(polar_data)
windRose(polar_data)
```

### All-in-one Maps

The easiest way to get polar plots on a map is through the use of the all-in-one functions. These are all named using the pattern `{function-name}Map`, where `{function_name}` is a short hand for the equivalent [openair]{.pkg} function. A reference is provided in @tbl-dirAnalysisRef.

```{r}
#| label: tbl-dirAnalysisRef
#| echo: false
#| tbl-cap: "A reference table for `openairmaps` directional analysis mapping functions."
tribble(
  ~openair, ~ openairmaps, ~ `unique arguments`,
  "`polarAnnulus`", "`annulusMap`", "`period`",
  "`polarFreq`", "`freqMap`", "`statistic`",
  "`percentileRose`", "`percentileMap`", "--",
  "`polarPlot`", "`polarMap`", "`x`",
  "`pollutionRose`", "`pollroseMap`", "`statistic`",
  "`windRose`", "`windroseMap`", "--"
) %>%
  gt::gt() %>%
  gt::fmt_markdown(everything())
```

Effectively all of these functions have very similar arguments, although some are unique to the specific function (also shown in @tbl-dirAnalysisRef). The important ones to pay attention to are:

-   `data`: The data you would like to map. Ensure that lat/lon information is present.

-   `pollutant`: The pollutant(s) of interest. If multiple pollutants are provided, a "layer control" menu will allow readers to swap between them.

-   `latitude`, `longitude`: The lat/lon column names. If they are not

-   `control`: A column to use to create a "layer control" menu. Specifying `control` effectively splits the input data along the specified column, creating multiple separate sets of directional analysis plots. Common columns to pass to `control` will be those created by `openair::cutData` or `openair::splitByDate`.[^appendix-openairmaps-1]

[^appendix-openairmaps-1]: Note that maps can only have one "layer control" menu. Users should therefore only provide multiple pollutants *or* an argument to `control`, but never both. If multiple pollutants *and* `control` are specified, `control` will be ignored.

-   `popup`: A column to be used to create a HTML "popup" that appears when users click the markers. This would be useful to label each marker with its corresponding site name or code, although other information could be usefully included (e.g., site type, average pollutant concentrations, and so on).

-   `label`: Much the same as "popup", but the message will appear when users hover-over the marker rather than click on it. Labels are often much shorter than popups.

-   `provider`: The [leaflet]{.pkg} base map provider(s) you'd like to use. If multiple providers are provided, a "layer control" menu will allow readers to swap between them. Note that you can provide multiple pollutants *and* providers!

-   `...`: Any additional arguments to pass to the equivalent [openair]{.pkg} function. This could be useful if you want to, for example, use the same colour scale for all of the plots by using the `limits` argument.

`polarMap` is demonstrated in @fig-polarMap. Try clicking on each of the markers to see which sites they correspond to.

```{r}
#| label: fig-polarMap
#| fig-cap: "A demonstration of `polarMap`."
polarMap(
  polar_data,
  pollutant = "nox",
  latitude = "lat",
  longitude = "lon"
)
```

Another example, this time using `annulusMap`, is given in @fig-annulusMap. Note that this time there are two different pollutants plotted, which can be swapped between using the layer control menu. Note that [openairmaps]{.pkg} automatically deals with subscripts in common pollutant names.

```{r}
#| label: fig-annulusMap
#| fig-cap: "A more complex demonstration, this time using `annulusMap`."
annulusMap(
  polar_data,
  pollutant = c("nox", "no2"), 
  provider = "CartoDB.Positron",
  latitude = "lat",
  longitude = "lon"
)
```

A third example is shown in @fig-controlMap. This uses `percentileMap` and demonstrates how to use the "control" option to create a custom "layer control" menu and "label" and "popup" to label the markers, as well as passing on arguments to the equivalent [openair]{.pkg} function --- in this case, passing the "intervals" argument to `percentileRose` so that all of the markers are on the same radial axis.

```{r}
#| label: fig-controlMap
#| fig-cap: "A demonstration of `percentileMap` using the 'control' option and passing arguments to `openair::percentileRose`."
polar_data %>%
  openair::cutData("weekend") %>% 
  percentileMap(
    pollutant = "nox",
    control = "weekend",
    latitude = "lat",
    longitude = "lon", 
    provider = "Esri.WorldTopoMap",
    cols = "viridis",
    popup = "site",
    label = "site_type",
    intervals = c(0, 200, 400, 600, 800, 1000)
  )
```

### Marker Function

The directional analysis marker function is `addPolarMarkers`, which behaves similarly (but not identically) to `leaflet::addMarkers`. You will need to define the `data` you're using, the `lat`/`lng`[^appendix-openairmaps-2] columns, a column to distinguish different sites (`type`), and an [openair]{.pkg} function (`fun`). As with `leaflet::addMarkers` and similar functions, you can define `group` and `layerId`, which allows you to create more complex maps than can be achieved using the all-in-one [openairmaps]{.pkg} functions.

[^appendix-openairmaps-2]: Marker functions use "lat" and "lng" as argument names for consistency with the leaflet package.

To demonstrate, @fig-polarFreqMap has been created. This uses the `polarFreq` function to plot multiple polar pollutant frequency plots for oxides of nitrogen. What is different about this map is that users can select the specific statistic they are interested in -- in this case, mean, median or maximum. This is achieved by using the `group` arguments and `addLayersControl`.

```{r}
#| label: fig-polarFreqMap
#| fig-cap: "Using `addPolarMarkers` to create a more complex map."
leaflet() %>%
  addProviderTiles(
    "Stamen.Toner"
  ) %>% 
  addPolarMarkers(
    lng = "lon", lat = "lat",
    pollutant = "nox",
    group = "Mean",
    data = polar_data,
    fun = polarFreq,
    statistic = "mean"
  ) %>% 
  addPolarMarkers(
    lng = "lon", lat = "lat",
    pollutant = "nox",
    group = "Median",
    data = polar_data,
    fun = polarFreq,
    statistic = "median"
  ) %>% 
  addPolarMarkers(
    lng = "lon", lat = "lat",
    pollutant = "nox",
    group = "Max",
    data = polar_data,
    fun = polarFreq,
    statistic = "max"
  ) %>%
  addLayersControl(
    baseGroups = c("Mean", "Median", "Max")
  )
```

One could imagine different applications, using this approach. For example:

-   Giving users the option to swap between different `period`s for a `polarAnnulus` map, or different polar coordinates in a `polarPlot` map (i.e., different `x` arguments).

-   Allowing users to swap between different plot types (e.g., have "Wind Rose", "Pollution Rose" and "Polar Plot" on the layer control menu).

The options are pretty much endless for the kinds of things you could achieve using this approach. If one of the all-in-one functions doesn't give you the flexibility you need, try to see if you can create your vision yourself from scratch using [leaflet]{.pkg} and the `addPolarMarkers` function.

## Trajectory Analysis

### Example Data

[openairmaps]{.pkg} contains the `traj_data` dataset to allow users to test the directional analysis functions. The structure of this data set is provided below. This was obtained using the `importTraj` function in [openair]{.pkg}; if you are using your own trajectory data, try to match this structure (including column names) so that the [openairmaps]{.pkg} functions will correctly work.

```{r}
#| label: glimpseTraj
dplyr::glimpse(traj_data)
```

### All-in-one Maps

There are two all-in-one functions for trajectory mapping in [openairmaps]{.pkg}, which will be discussed in turn.

1.  `trajMap`, which is an analogue to `openair::trajPlot`.

2.  `trajLevelMap`, which is an analogue to `openair::trajLevel`.

By default, `trajMap()` will plot your trajectories in black on a default "OpenStreetMap" base map, but the `colour` argument allows you to colour by any column of your data. For example, @fig-trajMap shows the trajectory paths coloured by arrival date. A popup is also automatically generated --- try clicking on the points to get information about that particular air mass.

```{r}
#| label: fig-trajMap
#| fig-cap: "A simple demonstration of `trajMap`."
trajMap(traj_data, colour = "date")
```

What may be of greater interest is colouring the trajectories by the concentration of pollutant on their arrival. The `colour` argument can be used for this. When `colour` is specified, trajectory paths are plotted in order of the numeric value of the "colour" column, so the highest concentrations (which are assumed to be of most interest) are most easily accessible. Specifying `colour` also creates a legend and appends a relevant line to the popup --- explore the example in @fig-trajPM.

```{r}
#| label: fig-trajPM
#| fig-cap: "A more thorough application of `trajMap`, this time coloured by PM concentrations."
trajMap(
  traj_data,
  colour = "pm10",
  npoints = 6,
  cols = "magma",
  provider = "CartoDB.Positron"
)
```

There is a `control` option in `trajMap` which allows for a layer control menu to be generated. This might be useful if you have a lot of trajectory paths and want to let users reduce the clutter. It also pairs nicely with clustered trajectories returned by `openair::trajCluster`. An example of this is given below, in @fig-trajNeon.

```{r}
#| label: trajclusters
#| fig-show: hide
clustdata <- trajCluster(traj_data)
```

```{r}
#| label: fig-trajNeon
#| fig-cap: Interactive map of clustered trajectories, with a cool neon colour scheme!
#| results: asis
trajMap(
  data = clustdata$data$traj,
  colour = "cluster",
  control = "cluster",
  cols = c("#9B5DE5", "#F15BB5", "#FEE440", "#00BBF9", "#00F5D4"),
  provider = "Stamen.Toner"
)
```

`trajLevelMap` is the other all-in-one trajectory function and is, in many ways, simpler than `trajMap`. Think of `trajLevelMap` as you do `trajLevel` --- it has many of the same arguments and does effectively the same thing, but returns an interactive map. In @fig-trajLevel, try hovering over and clicking each of the tiles to learn more specific details about each bin.

```{r}
#| label: fig-trajLevel
#| fig-cap: An interactive 'frequency' map plotted by `trajLevelMap`.
#| results: asis
trajLevelMap(
  traj_data,
  statistic = "pscf",
  pollutant = "pm10",
  cols = "viridis",
  provider = "Esri"
)
```

### Marker Function

The marker function equivalent of `trajMap` is `addTrajPaths` which, much like `addPolarMarkers`, allows you to customise your trajectory maps. For example, @fig-trajMarker shows a way to plot multiple sets of trajectory data on one map (in this case, one arriving in London and the other in Paris).

```{r}
#| label: fig-trajMarker
#| fig-cap: A demonstration of the use of `addTrajPaths`.
france <- importTraj("paris", year = 2009) %>%
  selectByDate(
    start = "15/4/2009",
    end = "21/4/2009"
  )

uk <- importTraj(year = 2009) %>%
  selectByDate(
    start = "15/4/2009",
    end = "21/4/2009"
  )

leaflet() %>%
  addTiles() %>%
  addTrajPaths(data = uk,
               color = "blue",
               group = "London, UK", 
               opacity = .25) %>%
  addMarkers(data = dplyr::slice_head(uk, n = 1),
             lat = ~lat, lng = ~lon,
             group = "London, UK", label = "UK") %>%
  addTrajPaths(data = france,
               color = "red",
               group = "Paris, France", 
               opacity = .25) %>%
  addMarkers(data = dplyr::slice_head(france, n = 1), 
             lat = ~lat, lng = ~lon,
             group = "Paris, France", label = "FR") %>%
  addLayersControl(overlayGroups = c("Paris, France", "London, UK"))

```
