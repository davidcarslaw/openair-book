---
title: Trajectory Analysis
subtitle: Transforming static trajectory plots into interactive HTML widgets 
author: Jack Davison
abstract: "`openair` already contains functionality for visualising HYSPLIT back trajectories, but as more trajectory paths are added these static plots can become difficult to interpret. `openairmaps` allows for effectively the same visualisations to be mapped in `leaflet`, which can help untangle these complex figures."
execute: 
  cache: false
---

## Data

[openairmaps]{.pkg} contains the `traj_data` dataset to allow users to test the directional analysis functions. The structure of this data set is provided below. This was obtained using the `importTraj()` function in [openair]{.pkg}; if you are using your own trajectory data, try to match this structure (including column names) so that the [openairmaps]{.pkg} functions will work correctly.

```{r}
#| label: glimpseTraj
library(openairmaps)
dplyr::glimpse(traj_data)
```

## Overview

There are two all-in-one mapping functions for trajectory analysis in [openairmaps]{.pkg}, which will be discussed in turn.

1.  `trajMap()`, which is an analogue to `openair::trajPlot()`.

2.  `trajLevelMap()`, which is an analogue to `openair::trajLevel()`.

Both of these functions require the data to be in the structure shown in the previous section.

## Mapping Trajectory Paths

By default, `trajMap()` will plot your trajectories in black on a default "OpenStreetMap" base map, but the `colour` argument allows you to colour by any column of your data. For example, @fig-trajMap shows the trajectory paths coloured by arrival date. A popup is also automatically generated --- try clicking on the points to get information about that particular air mass.

```{r}
#| label: fig-trajMap
#| fig-cap: "A simple demonstration of `trajMap`."
trajMap(traj_data, colour = "date")
```

What may be of greater interest is colouring the trajectories by the concentration of pollutant on their arrival. The `colour` argument can be used for this. When `colour` is specified, trajectory paths are plotted in order of the numeric value of the "colour" column, so the highest concentrations (which are assumed to be of most interest) are most easily accessible. Specifying `colour` also creates a legend and appends a relevant line to the popup --- explore the example in @fig-trajPM.

```{r}
#| label: fig-trajPM
#| fig-cap: "A more thorough application of `trajMap`, this time coloured by PM concentrations."
trajMap(
  traj_data,
  colour = "pm10",
  npoints = 6,
  cols = "magma",
  provider = "CartoDB.Positron"
)
```

There is a `control` option in `trajMap()` which allows for a layer control menu to be generated. This might be useful if you have a lot of trajectory paths and want to let users reduce the clutter. It also pairs nicely with clustered trajectories returned by `openair::trajCluster()`. An example of this is given below, in @fig-trajNeon.

```{r}
#| label: trajclusters
#| fig-show: hide
clustdata <- openair::trajCluster(traj_data)
```

```{r}
#| label: fig-trajNeon
#| fig-cap: Interactive map of clustered trajectories, with a cool neon colour scheme!
#| eval: false
trajMap(
  data = clustdata$data$traj,
  colour = "cluster",
  control = "cluster",
  cols = c("#9B5DE5", "#F15BB5", "#FEE440", "#00BBF9", "#00F5D4"),
  provider = "Stamen.Toner"
)
```

## Mapping Gridded Trajectories

`trajLevelMap()` is the other all-in-one trajectory function and is, in many ways, simpler than `trajMap()`. Think of `trajLevelMap()` as you do `openair::trajLevel()` --- it has many of the same arguments and does effectively the same thing, but returns an interactive map. In @fig-trajLevel, try hovering over and clicking each of the tiles to learn more specific details about each bin.

```{r}
#| label: fig-trajLevel
#| fig-cap: An interactive 'frequency' map plotted by `trajLevelMap`.
trajLevelMap(
  traj_data,
  statistic = "pscf",
  pollutant = "pm10",
  cols = "viridis",
  provider = "Esri"
)
```

At time of writing, all of the different `trajLevel()` statistics are supported in `trajLevelMap()`.

## Marker Function

The marker function equivalent of `trajMap()` is `addTrajPaths()` which, much like `addPolarMarkers()`, allows you to customise your trajectory maps. For example, @fig-trajMarker shows a way to plot multiple sets of trajectory data on one map (in this case, one arriving in London and the other in Paris).

```{r}
#| label: fig-trajMarker
#| fig-cap: A demonstration of the use of `addTrajPaths`.
library(leaflet)
library(openair)

france <- importTraj("paris", year = 2009) %>%
  selectByDate(
    start = "15/4/2009",
    end = "21/4/2009"
  )

uk <- importTraj(year = 2009) %>%
  selectByDate(
    start = "15/4/2009",
    end = "21/4/2009"
  )

leaflet() %>%
  addTiles() %>%
  addTrajPaths(data = uk,
               color = "blue",
               group = "London, UK", 
               opacity = .25) %>%
  addMarkers(data = dplyr::slice_head(uk, n = 1),
             lat = ~lat, lng = ~lon,
             group = "London, UK", label = "UK") %>%
  addTrajPaths(data = france,
               color = "red",
               group = "Paris, France", 
               opacity = .25) %>%
  addMarkers(data = dplyr::slice_head(france, n = 1), 
             lat = ~lat, lng = ~lon,
             group = "Paris, France", label = "FR") %>%
  addLayersControl(overlayGroups = c("Paris, France", "London, UK"))

```
