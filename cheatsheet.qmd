---
format: 
  html:
    number-sections: false
execute: 
  eval: false
  cache: false
---

# Cheatsheet {.unnumbered}

The `{openair}` family of packages were written for the purpose of analysing air quality data --- or more generally atmospheric composition data. They also give easy access to UK and European air quality data, and global measured meteorological data. This page is a "cheat sheet" for the whole `{openair}` ecosystem, and so is a useful quick reference when using it in your work.

`{openair}` expects certain specific data features:

-   (for trend analysis) one column called `date`, formatted as a date object (e.g., `POSIXct`).

-   (for directional analysis) two columns, `ws` for wind speed in m s^-1^ and `wd` in degrees for wind direction, both numeric.

If encountering issues, users should attempt to mimic the `openair::mydata` structure, or any of the data made available through `importUKAQ()`.

```{r}
#| label: loadpkg
#| eval: true
library(openair)
library(openairmaps)
library(worldmet)
```

## Data Access

### UK Air Quality Data

There are five main UK networks available through `{openair}`: the national AURN (`"aurn"`), the devolved networks (`c("aqe", "saqn", "waqn", "ni")`), and the non-national, locally-managed networks (`"local"`).

To view the available data:

-   `importMeta()`: returns a table of available sites. Use `View()` to see in a data explorer, or filter it programmatically (e.g., with `dplyr::filter()`).

    ```{r}
    # return AURN & AQE sites (source), return a row per site/pollutant (all),
    # sites open from 2015 to 2023 (year)
    importMeta(source = c("aurn", "aqe"),
               all = TRUE,
               year = 2015:2023)
    ```

-   `networkMap()`: creates an interactive map of available sites.

    ```{r}
    # create a map of AURN, AQE and local sites (source), with a menu to select
    # site type (control)
    networkMap(source = c("aurn", "aqe", "local"), control = "site_type")
    ```

-   `searchNetwork()`: searches networks based on a distance from a point.

    ```{r}
    # get all AURN sites (source) open in 2020 (year) within 20 km (max_dist) of
    # Buckingham Palace (lat/lng)
    palace <- convertPostcode("SW1A1AA")
    searchNetwork(
      lat = palace$lat,
      lng = palace$lng,
      source = "aurn",
      max_dist = 20,
      year = 2020
    )
    ```

To import air quality data:

-   `importUKAQ()`: imports from any of the five networks above.

    ```{r}
    # import data from the AURN site (aurn) Marylebone Road (site) from 2022
    # (year)
    importUKAQ(site = "my1", year = 2022, source = "aurn")
    ```

-   Any number of sites/networks/years can be imported at once - ensure that the length of `site` matches the length of `source` if mixing and matching networks.

    ```{r}
    # import data from two sites in Reading (site), from 2015:2022 (year). 
    # REA5 is from the AURN and REA2 is from AQE (source)
    importUKAQ(
      site = c("rea5", "rea2"),
      year = 2015:2022,
      source = c("aurn", "aqe")
    )
    ```

-   Use options to refine the output:

-   `data_type`: returns different time averaging periods (e.g., daily, monthly) or statistics (e.g., rolling means, daily maxes, DAQI).

-   `hc`: returns hydrocarbon measurements, where available.

-   `meta`: append site information (site type, latitude and longitude)

-   `meteo`: append modelled meteorological data, where available.

-   `ratified`: append a flag whether the data has been ratified.

-   `to_narrow`: stack all pollutants in one column.

### World Meteorological Data

`{worldmet}` gives access to global meteorological data from the NOAA ISD database. `{worldmet}` has two main functions:

-   `worldmet::getMeta()`: returns an interactive map and table of NOAA ISD stations from which data can be imported. Can also specify a `lat`/`lon` to find met stations local to, e.g., an AQ measurement site.

    ```{r}
    # get 5 nearest (n) NOAA ISD stations near Buckingham Palace (lat/lon)
    palace <- convertPostcode("SW1A1AA")
    worldmet::getMeta(lat = palace$lat, lon = palace$lng, n = 5)
    ```

-   `worldmet::importNOAA()`: imports data from NOAA ISD stations.

    ```{r}
    # import met data from Heathrow (code) from the year 2020 (year)
    worldmet::importNOAA(code = "037720-99999", year = 2020)
    ```

Users should use a function like `merge()` or `dplyr::left_join()` to combine air quality and meteorological data into a single dataframe.

## Data Utilities

`{openair}` exports several data utilities which condition, filter and summarise data.

**Conditioning:**

-   `cutData()`: splits data by appending an additional label column corresponding to some `type`. These `type` options underpin much of how `{openair}` conditions its data in the other utility and plotting functions.

| type                        | description                                                                                                    |
|-----------------|-------------------------------------------------------|
| year                        | calendar year                                                                                                  |
| month                       | month of the year                                                                                              |
| hour                        | hour of the day                                                                                                |
| monthyear                   | both calendar year and month of the year                                                                       |
| weekend                     | weekday (M-F) or weekend (S/S)                                                                                 |
| weekday                     | days of the week                                                                                               |
| season                      | winter (DJF), spring (MAM), summer (JJA), autumn (SON); this allocation can be changed by setting `hemisphere` |
| seasonyear/yearseason       | both calendar year and season                                                                                  |
| daylight/dst                | see `?cutData()`                                                                                               |
| wd                          | wind direction (N/NE/E/SE/etc.)                                                                                |
| (numeric variable)          | splits a numeric variable into `n.levels` quantiles                                                            |
| (character/factor variable) | identity                                                                                                       |

-   `splitByDate()`: splits data by appending an additional column defined by date periods. For example, AQ data could be split into "before" and "after" a policy was implemented, industrial activity started, etc.

    ```{r}
    # split data into before and after the year 2000
    splitByDate(mydata,
                dates = "01/01/2000",
                labels = c("before 2000", "after 2000"))
    ```


-   `selectRunning()`: splits data by appending an additional column indicating whether a given `pollutant` is above a `threshold` for `run.len` units of time.

    ```{r}
    # find periods where NOx > 400 for 5 hours
    selectRunning(mydata,
                  pollutant = "nox",
                  run.len = 5,
                  threshold = 400)
    ```

**Filtering:**

-   `selectByDate()`: filters a dataset by hour/day/month/year and/or a user-defined start or end date.

    ```{r}
    # select weekdays, 9 till 5
    selectByDate(mydata, day = "weekday", hour = 9:17)
    ```

**Summarising:**

-   `timeAverage()`: flexibly summarises or expands data to different `avg.time` periods (hour, day, month, etc.). Wind direction, `wd` (and, optionally, wind speed, `ws`) is correctly vector averaged.

    ```{r}
    # daily average all numeric columns
    timeAverage(mydata, avg.time = "day")
    ```

-   `calcPercentile()`: calculates any number of percentile values for a given `avg.time` period, similar to `timeAverage()`.

    ```{r}
    # get the 25th, 50th, 75th percentile of O3 per month
    calcPercentile(
      mydata,
      pollutant = "o3",
      avg.time = "month",
      percentile = c(25, 50, 75)
    )
    ```

-   `aqStats()`: summarises a dataframe into common air pollution-relevant statistics. See `?aqStats` for complete details.

    ```{r}
    # calculate statistics for the UK DAQI pollutants
    aqStats(mydata, pollutant = c("o3", "so2", "no2", "pm10", "pm25"))
    ```

-   `rollingMean()`: calculates rolling mean statistics for relevant pollutants (O~3~ and PM~10~).

    ```{r}
    # calculate the rolling 8-hour mean for ozone
    rollingMean(
      mydata,
      pollutant = "o3",
      width = 8,
      align = "right"
    )
    ```

-   `runRegression()`: calculates rolling regressions between variables `x` and `y` with a window width of `run.len`.

    ```{r}
    # calculate a running regression between NOx and PM10
    runRegression(
      selectByDate(mydata, year = 2004, month = 1:3),
      x = "nox",
      y = "pm10",
      run.len = 3
    )
    ```

-   `binData()`: bins one variable and calculates average values for all other numeric variables, including confidence intervals for a specific variable of choice, per bin.

    ```{r}
    # bin NOx and calculate PM10 stats per bin
    binData(mydata, bin = "nox", uncer = "pm10")
    ```

-   `modStats()`: calculates common numerical model evaluation statistics between a modelled value `mod` and observed value `obs`.

    ```{r}
    # fit a model of NO2, predict using it, and calculate statistics
    mod <- lm(formula = no2 ~ o3, data = mydata)
    mydata$pred_no2 <- predict.lm(mod, mydata)
    modStats(mydata, mod = "pred_no2", obs = "no2")
    ```

**Vectors:**

-   `bootMeanDF()`: calculates the uncertainty intervals in the mean of a **vector**. 

    ```{r}
    # bootstrapped mean and uncertainty of NO2
    bootMeanDF(mydata$no2)
    ```

## Directional Analysis

### Bivariate Polar Plots

Bivariate polar plots encode wind speeds, wind directions, and pollutant concentrations on one smoothed surface. Wind speeds can be exchanged for other atmospheric variables, such as pressure or stability, or temporal variables like hour of the day. Clustering and differences are available.

    ```{r}
    #| label: plotpolars
    #| layout-nrow: 1
    #| eval: true
    #| echo: false
    polarPlot(mydata)
    polarAnnulus(mydata)
    ```

-   `polarPlot()`: plots a highly customisable polar surface of a specified `pollutant`.

    ```{r}
    
    ```

-   `polarCluster()`: clusters a bivariate polar plot into a user-defined number of clusters.

    ```{r}
    
    ```

-   `polarDiff()`: 

    ```{r}
    
    ```


### Wind & Pollution Roses

Wind and pollution roses are ways of summarising meteorological data by displaying the frequency of different wind directions, optionally coloured using bins of wind speed or a pollutant concentration.

    ```{r}
    #| echo: false
    #| eval: true
    #| layout-nrow: 1
    windRose(mydata, key.position = "right")
    pollutionRose(mydata)
    ```

-   `windRose(mydata, ...)`: plots a wind rose with sensible defaults.

    ```{r}
    # default wind rose
    windRose(mydata)
    
    # wind rose per year
    windRose(mydata, type = "year")
    
    # wind rose with manual breaks, at 10 degree angles
    windRose(mydata, breaks = c(0, 1, 2, 5, 10, Inf), angle = 10)
    ```

-   `pollutionRose(mydata, pollutant, ...)`: plots a pollution rose with slightly different defaults.

    ```{r}
    # default pollution rose of NOx
    pollutionRose(mydata, pollutant = "nox")
    
    # pollution rose of NOx per wind speed bin
    pollutionRose(mydata, pollutant = "nox", type = "ws")
    
    # normalised pollution rose of NOx showing relative contribution to the mean
    pollutionRose(
      mydata,
      pollutant = "nox",
      normalise = TRUE,
      statistic = "prop.mean"
    )
    ```

- `pollutionRose(mydata, ws, wd, ws2, wd2)`: plots a meteorological bias rose, visualising the difference between the two datasets. This could illustrate a change in meteorology over time, or the difference between measured and modelled met.

    ```{r}
    # mock up data to compare two met datasets
    before <- selectByDate(mydata, year = 1999)[c("date", "ws", "wd")]
    after <- selectByDate(mydata, year = 2003)[c("ws", "wd")]
    joined <- cbind(before, after)
    joined <- setNames(joined, c("date", "wsb", "wdb", "wsa", "wda"))
    
    # compare two met datasets using (ws, wd, ws2, wd2) 
    pollutionRose(
      joined,
      ws = "wsb",
      wd = "wdb",
      ws2 = "wsa",
      wd2 = "wda"
    )
    ```

### Other Polar Plots

`{openair}` provides a few other, more niche polar plotting functions that users may find useful.

```{r}
#| echo: false
#| eval: true
#| layout-nrow: 1
polarFreq(mydata)
percentileRose(mydata, key.position = "right")
```

-   `polarFreq()`:

    ```{r}
    
    ```

-   `percentileRose()`:

    ```{r}
    
    ```

### Trajectory Analysis

Directional analysis extends to plotting HYSPLIT trajectories.

```{r}
#| echo: false
#| eval: true
#| layout-nrow: 1
trajPlot(traj_data)
trajLevel(traj_data)
```

-   `importTraj()`:

    ```{r}
    
    ```

-   `trajPlot():`

    ```{r}
    
    ```

-   `trajLevel():`

    ```{r}
    
    ```

-   `trajCluster():`

    ```{r}
    
    ```

## Time Series & Trends

### Time Series

`{openair}` contains a few functions for creating classic time series, with options for smoothing or clustering.

```{r}
#| echo: false
#| eval: true
#| layout-nrow: 1
smoothTrend(mydata, c("nox", "no2"))
timeProp(
  mydata,
  pollutant = "o3",
  proportion = "ws",
  avg.time = "month",
  key.position = "bottom", key.columns = 1
)
```

-   `timePlot()`:

    ```{r}
    
    ```

-   `timeProp():`

    ```{r}
    
    ```

-   `smoothTrend()`: 

    ```{r}
    
    ```

-   `TheilSen()`:

    ```{r}
    
    ```

### Trend Plots

```{r}
#| echo: false
#| eval: true
#| layout-nrow: 1
calendarPlot(mydata, year = 2000)
timeVariation(mydata)
```

-   `trendLevel()`:

    ```{r}
    
    ```

-   `timeVariation()`:

    ```{r}
    
    ```

-   `calendarPlot()`:

    ```{r}
    
    ```

## Other Plots

### Model Evaluation

```{r}
#| echo: false
#| eval: true
#| layout-nrow: 1
library(latticeExtra)
TaylorDiagram(mydata, "no2", "nox")
conditionalQuantile(mydata, "no2", "nox")
```

-   `TaylorDiagram()`:

-   `conditionalEval()`:

-   `conditionalQuantile()`:

### Utility Plots

```{r}
#| echo: false
#| eval: true
#| layout-nrow: 1
scatterPlot(mydata)
corPlot(mydata)
```

-   `scatterPlot()`:

-   `corPlot()`:

<hr>

Last updated: `r Sys.Date()`

```{r}
#| eval: true
packageVersion("openair")
packageVersion("openairmaps")
packageVersion("worldmet")
```

