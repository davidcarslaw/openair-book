---
author: David Carslaw
abstract: Meteorological data is key to understanding air quality measurements. This section describes a fast and convenient way of accessing meteorological data for sites worldwide.
---

# Access meteorological data {#sec-worldmet}

## The worldmet package

Most of the import functions described in @sec-importUKAQ return basic modelled hourly meteorological data (wind speed, wind direction and surface temperature). These data are derived from the WRF model that Ricardo runs to provide the data.

Alternatively it may be advantageous to use surface measurements. [worldmet]{.pkg} provides an easy way in which to access surface meteorological data from \>30,000 sites across the world. The package accesses the NOAA webservers to download hourly data. See <https://github.com/davidcarslaw/worldmet> and <https://www.ncdc.noaa.gov/isd> for further information.

Access to surface meteorological data is very useful in general but is especially useful when using [openair]{.pkg} and functions such as `polarPlot`. To install the package, type:

```{r}
#| label: install_worldmet
#| eval: false
install.packages("worldmet")
```

There are two main functions in the package: `getMeta` and `importNOAA`. The former helps the user find meteorological sites by name, country and proximity to a location based on the latitude and longitude. `getMeta` will also return a code that can be supplied to `importNOAA`, which then imports the data.

Probably the most common use of `getMeta` is to search around a location of interest based on its latitude and longitude. First we will load the [worldmet]{.pkg} (and other packages we use later):

```{r}
#| label: pkg
library(worldmet)
library(openair)
library(tidyverse)
```

As an example, we will search for the 10 nearest sites to Dublin (latitude = 53.3, longitude = -6.3)[^access-met-data-1]:

[^access-met-data-1]: Note that `returnMap` was only used to display the map in this document and would not normally be needed.

```{r}
#| label: fig-worldmet
#| fig-cap: Map of returned area of interest. The user can interactively select a site of interest and find its code to import data.
getMeta(lat = 53.3, lon = -6.3, returnMap = TRUE)
```

Note that it is just as easy to access all the site information at once because it is quick to use the map to select the site and its code i.e.

```{r}
#| label: getMeta-map
#| eval: false
getMeta()
```

We can use the map that is produced to select a site of interest and import the data. For example, to import data for Dublin Airport and look at some of the data:

```{r}
#| label: dublin
dublin_met <- importNOAA(code = "039690-99999", year = 2019)

# first few lines of data
dublin_met
```

Plot a wind rose.

```{r}
#| out-width: 50%
#| fig-width: 5
#| fig-height: 5
#| label: fig-dublin-rose
#| fig-cap: Example wind rose for Dublin Airport data.
windRose(dublin_met)
```

## Linking with air quality data {#sec-link-aq}

Having imported some meteorological data it will often be necessary to combine it with air quality data. Quite how this is done depends on the air quality data. The important point is there should be a `date` column in each data set that make the connection between the two. It may also depend on whether the air quality data has existing fields that also exist in the meteorological data e.g. `ws`, `wd` and `air_temp`, as is the case with most data accessible as described in @sec-importUKAQ. In this case, the aim to to replace any existing meteorological variables in the air quality data with those in the meteorological data. An example is shown below.

```{r}
#| label: linkaqmet
# import some air quality data and check the variables that exist

aq_2019 <- importUKAQ(site = "kc1", year = 2019)
names(aq_2019) # ws, wd, air_temp already exist from WRF model

# import some met data - default is London Heathrow
met_2019 <- importNOAA(year = 2019)

# merge the two data sets but not ws, wd, air_temp from aq data
aq_met <- left_join(
  select(aq_2019, -ws, -wd, -air_temp),
  met_2019,
  by = "date"
)

names(aq_met)

```
